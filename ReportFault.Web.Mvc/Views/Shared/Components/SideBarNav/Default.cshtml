@using Abp.Collections.Extensions
@using ReportFault.Web.Views
@using ReportFault.Web.Views.Shared.Components.SideBarNav
@model SideBarNavViewModel
@{
    var calculateMenuUrl = new Func<string, string>((url) =>
    {
        if (string.IsNullOrEmpty(url))
        {
            return ApplicationPath;
        }

        if (UrlChecker.IsRooted(url))
        {
            return url;
        }

        return ApplicationPath + url;
    });
}
 
    <ul class="sidebar-menu">
        @foreach (var menuItem in Model.MainMenu.Items)
        {
            <li class="@(Model.ActiveMenuItemName == menuItem.Name ? "active current-active-item" : "")">
                @if (menuItem.Items.IsNullOrEmpty())
                {
                    @*<a href="@calculateMenuUrl(menuItem.Url)">
                            @if (!string.IsNullOrWhiteSpace(menuItem.Icon))
                                {
                                <i class="material-icons">@menuItem.Icon</i>
                                }
                            <span>@menuItem.DisplayName</span>
                        </a>*@
                    @*<li @(isActive ? Html.Raw("class=\"active current-active-item\"") : null)>*@
                    <a href="@calculateMenuUrl(menuItem.Url)" class="menu-item-link">
                        @if (!String.IsNullOrEmpty(menuItem.Icon))
                        {
                            <i class="material-icons">@menuItem.Icon</i>
                        }
                        <span class="menu-item-title">@menuItem.DisplayName</span>
                    </a>
                }
                else
                {
                    <a href="javascript:void(0);" class="menu-toggle">
                        @if (!string.IsNullOrWhiteSpace(menuItem.Icon))
                        {
                            <i class="material-icons">@menuItem.Icon</i>
                        }
                        <span class="menu-item-title">@menuItem.DisplayName</span>
                    </a>

                @*<li class="treeview @(isActive ? Html.Raw("active current-active-item") : null)">
                    <a href="#">
                        @if (!String.IsNullOrEmpty(Model.IconClass))
                        {
                            <text>
                            <i class="fa @Url.Content(Model.IconClass)"></i>
                            </text>
                        }
                        <span>@Model.Title</span>  
                            <i class="fa fa-angle-left pull-right"></i>
                       
                    </a>
                    @{
                        var childNodes = Model.ChildNodes.Where(x => x.Visible).ToList();
                    }
                    @if (childNodes.Any())
                    {
                        <ul class="treeview-menu">
                            @foreach (var childItem in childNodes)
                            {
                                @await Html.PartialAsync("_MenuItem", childItem)
                            }
                        </ul>
                    }
                </li>*@

                <ul class="treeview-menu">
                    @foreach (var subMenuItem in menuItem.Items)
                        {
                        <li class="@(Model.ActiveMenuItemName == subMenuItem.Name ? "active" : "")">
                            @if (subMenuItem.Items.IsNullOrEmpty())
                                {
                                <a href="@calculateMenuUrl(subMenuItem.Url)">
                                    @if (!string.IsNullOrWhiteSpace(subMenuItem.Icon))
                                        {
                                        <i class="material-icons">@subMenuItem.Icon</i>
                                        }
                                    <span>@subMenuItem.DisplayName</span>
                                </a>
                                }
                                else
                                {
                                <a href="javascript:void(0);" class="menu-toggle">
                                    @if (!string.IsNullOrWhiteSpace(subMenuItem.Icon))
                                        {
                                        <i class="material-icons">@subMenuItem.Icon</i>
                                        }
                                    <span>@subMenuItem.DisplayName</span>
                                </a>
                                <ul class="treeview-menu">
                                    @foreach (var subSubMenuItem in subMenuItem.Items)
                                        {
                                        <li class="@(Model.ActiveMenuItemName == subSubMenuItem.Name ? "active" : "")">
                                            <a href="@calculateMenuUrl(subSubMenuItem.Url)">
                                                @subSubMenuItem.DisplayName
                                            </a>
                                        </li>
                                        }
                                </ul>
                                }
                        </li>
                        }
                </ul>
                }
        </li>
        }
    </ul>
